<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:autopilot"
             x:Class="autopilot.App"
             StartupUri="Views/Editor.xaml">
    <Application.Resources>
		<ResourceDictionary>
			<Color x:Key="AppBackgroundColorCode">#ff333333</Color>
			<Color x:Key="ControlBackgroundColorCode">#33ffffff</Color>
			<Color x:Key="ButtonBackgroundColorCode">#55ffffff</Color>
			<Color x:Key="ControlBorderColorCode">#66ffffff</Color>
			<Color x:Key="AppForegroundColorCode">#ffffffff</Color>
			<Color x:Key="ControlForegroundColorCode">#ccffffff</Color>
			<Color x:Key="WarningTextColorCode">#ffff0000</Color>
			<Color x:Key="AccentColorCode">#99ffa500</Color>

			<SolidColorBrush x:Key="AppBackgroundColor" Color="{StaticResource AppBackgroundColorCode}"/>
            <SolidColorBrush x:Key="ControlBackgroundColor" Color="{StaticResource ControlBackgroundColorCode}"/>
			<SolidColorBrush x:Key="ButtonBackgroundColor" Color="{StaticResource ButtonBackgroundColorCode}"/>
			<SolidColorBrush x:Key="ControlBorderColor" Color="{StaticResource ControlBorderColorCode}"/>
            <SolidColorBrush x:Key="AppForegroundColor" Color="{StaticResource AppForegroundColorCode}"/>
            <SolidColorBrush x:Key="ControlForegroundColor" Color="{StaticResource ControlForegroundColorCode}"/>
            <SolidColorBrush x:Key="WarningTextColor" Color="{StaticResource WarningTextColorCode}"/>
            <SolidColorBrush x:Key="AccentColor" Color="{StaticResource AccentColorCode}"/>

			<!-- Label and TextBlock Resources -->
			<Style TargetType="{x:Type Label}">
                <Setter Property="Foreground" Value="{StaticResource AppForegroundColor}"/>
            </Style>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{StaticResource ControlForegroundColor}"/>
            </Style>

			<!-- TextBox Resources -->
			<Style TargetType="{x:Type TextBox}">
				<Setter Property="Background" Value="{StaticResource ControlBackgroundColor}"/>
				<Setter Property="Foreground" Value="{StaticResource ControlForegroundColor}"/>
				<Setter Property="BorderBrush" Value="{StaticResource ControlBorderColor}"/>
			</Style>
			<ControlTemplate x:Key="TextBoxControlTemplate" TargetType="{x:Type TextBox}">
				<Border x:Name="border" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource ControlBackgroundColor}" SnapsToDevicePixels="True">
					<ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Opacity" TargetName="border" Value="0.56"/>
					</Trigger>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource AccentColor}"/>
					</Trigger>
					<Trigger Property="IsKeyboardFocused" Value="True">
						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource AccentColor}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<!-- Button Resources -->
			<Style TargetType="{x:Type Button}">
				<Setter Property="Foreground" Value="{StaticResource ControlForegroundColor}"/>
				<Setter Property="Background" Value="{StaticResource ButtonBackgroundColor}"/>
				<Setter Property="BorderBrush" Value="{StaticResource ControlBorderColor}"/>
				<Setter Property="Height" Value="30"/>
				<Setter Property="Width" Value="100"/>
			</Style>
			<ControlTemplate x:Key="ButtonControlTemplate" TargetType="{x:Type Button}">
				<Border x:Name="border" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
					<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="IsDefaulted" Value="True">
						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource AccentColor}"/>
					</Trigger>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" TargetName="border" Value="{StaticResource ControlBackgroundColor}"/>
						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource AccentColor}"/>
					</Trigger>
					<Trigger Property="IsPressed" Value="True">
						<Setter Property="Background" TargetName="border" Value="{StaticResource AccentColor}"/>
						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource AccentColor}"/>
					</Trigger>
					<Trigger Property="ToggleButton.IsChecked" Value="True">
						<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
						<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
						<Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
						<Setter Property="Foreground" Value="#FF838383"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<!-- CheckBox Resources -->
			<Style TargetType="{x:Type CheckBox}">
				<Setter Property="Foreground" Value="{StaticResource ControlForegroundColor}"/>
				<Setter Property="Background" Value="{StaticResource AppBackgroundColor}"/>
			</Style>
			<ControlTemplate x:Key="CheckBoxControlTemplate" TargetType="{x:Type CheckBox}">
                <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Border x:Name="checkBoxBorder" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource ControlBackgroundColor}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <Grid x:Name="markGrid">
                            <Path x:Name="optionMark" Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z" Fill="{StaticResource ResourceKey=AppForegroundColor}" Margin="1" Opacity="0" Stretch="None"/>
                            <Rectangle x:Name="indeterminateMark" Fill="{StaticResource AppForegroundColor}" Margin="2" Opacity="0"/>
                        </Grid>
                    </Border>
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasContent" Value="True">
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style>
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Padding" Value="4,-1,0,0"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource ControlBackgroundColor}"/>
                        <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource AccentColor}"/>
                        <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource AppForegroundColor}"/>
                        <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource AppForegroundColor}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFE6E6E6"/>
                        <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FFBCBCBC"/>
                        <Setter Property="Fill" TargetName="optionMark" Value="#FF707070"/>
                        <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF707070"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
						<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource AccentColor}"/>
						<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource AccentColor}"/>
						<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource AppForegroundColor}"/>
						<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource AppForegroundColor}"/>
					</Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="{x:Null}">
                        <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                        <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

			<!-- ComboBox Resources -->
			<Style TargetType="{x:Type ComboBox}">
				<Setter Property="Foreground" Value="{StaticResource ControlForegroundColor}"/>
				<Setter Property="Background" Value="{StaticResource ControlBackgroundColor}"/>
			</Style>
			<ControlTemplate x:Key="ComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup" AllowsTransparency="False" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                        <StackPanel x:Name="shadow" Background="{StaticResource ControlBackgroundColor}" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                            <Border x:Name="DropDownBorder" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="1" Background="{StaticResource ControlBackgroundColor}">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="OpaqueRect" Fill="{StaticResource ControlBackgroundColor}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </StackPanel>
                    </Popup>
                    <ToggleButton x:Name="toggleButton" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource ControlBackgroundColor}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                <Setter Property="IsTabStop" Value="False"/>
                                <Setter Property="Focusable" Value="False"/>
                                <Setter Property="ClickMode" Value="Press"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border x:Name="templateRoot" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                                                <Border.Background>
													<SolidColorBrush Color="{StaticResource ControlBackgroundColorCode}"/>
												</Border.Background>
                                                <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                    <Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="{StaticResource ControlForegroundColor}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                                </Border>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ControlBackgroundColor}"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ControlBorderColor}"/>
                                                    <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                                </MultiDataTrigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="{StaticResource ControlForegroundColor}"/>
                                                </Trigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
													<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ControlBackgroundColor}"/>
													<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ControlBorderColor}"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ControlBackgroundColor}"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ControlBorderColor}"/>
													<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ControlBackgroundColor}"/>
													<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ControlBorderColor}"/>
                                                </MultiDataTrigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="Black"/>
                                                </Trigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
													<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource AccentColor}"/>
													<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource AccentColor}"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource AccentColor}"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource AccentColor}"/>
													<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource AccentColor}"/>
													<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource AccentColor}"/>
                                                </MultiDataTrigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="#FFBFBFBF"/>
                                                </Trigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFD9D9D9"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFBFBFBF"/>
                                                    <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                                </MultiDataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
						<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
					</Trigger>
                    <Trigger Property="HasItems" Value="False">
                        <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="True"/>
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                    </MultiTrigger>
                    <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                        <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
			<Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
				<Setter Property="SnapsToDevicePixels" Value="true" />
				<Setter Property="OverridesDefaultStyle" Value="true" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBoxItem}">
							<Border x:Name="Border" Padding="2" SnapsToDevicePixels="true" Background="Transparent">
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="SelectionStates">
										<VisualState x:Name="Unselected" />
										<VisualState x:Name="Selected">
											<Storyboard>
												<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
													<EasingColorKeyFrame KeyTime="0" Value="{StaticResource AccentColorCode}" />
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="SelectedUnfocused">
											<Storyboard>
												<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
													<EasingColorKeyFrame KeyTime="0" Value="{StaticResource AccentColorCode}" />
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
								<ContentPresenter />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!-- ListBox Resources -->
			<Style TargetType="{x:Type ListBox}">
				<Setter Property="Background" Value="{StaticResource ControlBackgroundColor}"/>
			</Style>
			<ControlTemplate x:Key="ListBoxControlTemplate" TargetType="{x:Type ListBox}">
				<Border x:Name="Bd" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource ControlBackgroundColor}" Padding="1" SnapsToDevicePixels="True">
					<ScrollViewer Focusable="False" Padding="{TemplateBinding Padding}">
						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</ScrollViewer>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Background" TargetName="Bd" Value="White"/>
						<Setter Property="BorderBrush" TargetName="Bd" Value="#FFD9D9D9"/>
					</Trigger>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="True"/>
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
					</MultiTrigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<DataTemplate x:Key="ListBoxItemTemplate">
				<Grid>
					<TextBlock Grid.Column="1" Text="{Binding Title}">
						<TextBlock.Style>
							<Style TargetType="{x:Type TextBlock}">
								<Setter Property="Foreground" Value="{StaticResource AppForegroundColor}"/>
								<Style.Triggers>
									<DataTrigger Binding="{Binding Enabled}" Value="False">
										<Setter Property="Foreground" Value="{StaticResource WarningTextColor}"/>
									</DataTrigger>
									<DataTrigger Binding="{Binding Enabled}" Value="True">
										<Setter Property="Foreground" Value="{StaticResource AppForegroundColor}"/>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</TextBlock.Style>
					</TextBlock>
				</Grid>
			</DataTemplate>
			<Style x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
				<Setter Property="SnapsToDevicePixels" Value="true" />
				<Setter Property="OverridesDefaultStyle" Value="true" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="ListBoxItem">
							<Border x:Name="Border" Padding="2" SnapsToDevicePixels="true">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource ControlBackgroundColorCode}" />
								</Border.Background>
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="SelectionStates">
										<VisualState x:Name="Unselected" />
										<VisualState x:Name="Selected">
											<Storyboard>
												<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
													<EasingColorKeyFrame KeyTime="0" Value="{StaticResource AccentColorCode}" />
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="SelectedUnfocused">
											<Storyboard>
												<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
													<EasingColorKeyFrame KeyTime="0" Value="{StaticResource AccentColorCode}" />
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
								<ContentPresenter />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!-- TabControl Resources -->
			<ControlTemplate x:Key="TabControlControlTemplate" TargetType="{x:Type TabControl}">
				<Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
					<Grid.ColumnDefinitions>
						<ColumnDefinition x:Name="ColumnDefinition0"/>
						<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
						<RowDefinition x:Name="RowDefinition1" Height="*"/>
					</Grid.RowDefinitions>
					<TabPanel x:Name="HeaderPanel" Background="Transparent" Grid.Column="0" IsItemsHost="True" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
					<Border x:Name="ContentPanel" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
						<ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="TabStripPlacement" Value="Bottom">
						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
						<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
					</Trigger>
					<Trigger Property="TabStripPlacement" Value="Left">
						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
						<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
						<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
						<Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
					</Trigger>
					<Trigger Property="TabStripPlacement" Value="Right">
						<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
						<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
						<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
						<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
						<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
						<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
						<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
						<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
						<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
			<ControlTemplate x:Key="TabItemControlTemplate" TargetType="{x:Type TabItem}">
				<Grid x:Name="templateRoot" SnapsToDevicePixels="True">
					<Border x:Name="mainBorder" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="1,1,1,0" Background="{StaticResource ControlBackgroundColor}" Margin="0">
						<Border x:Name="innerBorder" BorderBrush="{StaticResource ControlBorderColor}" BorderThickness="1,1,1,0" Background="{StaticResource ControlBackgroundColor}" Margin="-1" Opacity="0"/>
					</Border>
					<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
				</Grid>
				<ControlTemplate.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="mainBorder">
							<Setter.Value>
								<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
									<GradientStop Color="#FFECF4FC" Offset="0"/>
									<GradientStop Color="#FFDCECFC" Offset="1"/>
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter Property="BorderBrush" TargetName="mainBorder" Value="#FF7EB4EA"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource AccentColor}"/>
						<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource AccentColor}"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="mainBorder">
							<Setter.Value>
								<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
									<GradientStop Color="#FFECF4FC" Offset="0"/>
									<GradientStop Color="#FFDCECFC" Offset="1"/>
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter Property="BorderBrush" TargetName="mainBorder" Value="#FF7EB4EA"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource AccentColor}"/>
						<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource AccentColor}"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
						<Setter Property="Background" TargetName="mainBorder" Value="#FFF0F0F0"/>
						<Setter Property="BorderBrush" TargetName="mainBorder" Value="#FFD9D9D9"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
						<Setter Property="Background" TargetName="mainBorder" Value="#FFF0F0F0"/>
						<Setter Property="BorderBrush" TargetName="mainBorder" Value="#FFD9D9D9"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
						<Setter Property="Background" TargetName="mainBorder" Value="#FFF0F0F0"/>
						<Setter Property="BorderBrush" TargetName="mainBorder" Value="#FFD9D9D9"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
						<Setter Property="Background" TargetName="mainBorder" Value="#FFF0F0F0"/>
						<Setter Property="BorderBrush" TargetName="mainBorder" Value="#FFD9D9D9"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Left"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Panel.ZIndex" Value="1"/>
						<Setter Property="Margin" Value="-2,-2,0,-2"/>
						<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Bottom"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Panel.ZIndex" Value="1"/>
						<Setter Property="Margin" Value="-2,0,-2,-2"/>
						<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Right"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Panel.ZIndex" Value="1"/>
						<Setter Property="Margin" Value="0,-2,-2,-2"/>
						<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="Top"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Panel.ZIndex" Value="1"/>
						<Setter Property="Margin" Value="-2,-2,-2,0"/>
						<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
						<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
						<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
					</MultiDataTrigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
		</ResourceDictionary>
    </Application.Resources>
</Application>
